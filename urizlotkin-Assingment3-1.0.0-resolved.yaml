---
openapi: 3.0.0
info:
  title: Recipe WebSite API
  description: This is an API for the recipes website
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/urizlotkin/Assingment3/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: recipies
  description: Operations for getting, setting and uploading recipies
- name: users
  description: Operations for registeration and login
paths:
  /login:
    post:
      tags:
      - users
      summary: this method will hundle login proccess.
      description: By passing in the appropriate options, you can login as a user.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginBody'
        required: true
      responses:
        "200":
          description: user log-in succsefully
        "401":
          description: one of the details is incorrect.
  /register:
    post:
      tags:
      - users
      summary: this method will add user to the DB
      description: By passing good parametrs, you can create new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        "201":
          description: user register was successful
        "403":
          description: user name already exists
  /recipies/getRandomRecipies:
    get:
      tags:
      - recipies
      summary: this method will show 3 random recipies.
      description: 3 recipes has been shown.
      operationId: getRandomRecipe
      responses:
        "200":
          description: recipes has been loaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeDescription'
        "404":
          description: recipe not found.
  /recipies/getRecipeDescription:
    get:
      tags:
      - recipies
      summary: this method will return descreption recipe
      description: you can search for available recipe in the system
      operationId: getRecipeDescription
      parameters:
      - name: recipeId
        in: query
        description: pass an recipe id to show it
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipeDescription'
        "404":
          description: recipe id not found.
  /recipies/searchForRecipe:
    get:
      tags:
      - recipies
      summary: Search a recipe
      description: This method will search a recipe in the db, according to the query specified by the user
      operationId: searchRecipe
      parameters:
      - name: recipeSearchName
        in: query
        description: pass an recipe name to search
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: '["name","numberOfRecipes","userName","websiteName","filter"]'
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeDescription'
        "404":
          description: didn't found recipes for your search.
  /users/recipies/getLastWatched:
    get:
      tags:
      - recipies
      summary: returns an array of recipe descreption
      description: this method will return the 3 last watched recipes by current user
      operationId: getLastWatched
      parameters:
      - name: userName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: recipes has been loaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeDescription'
        "404":
          description: recipe not found.
  /users/recipies/getFavorite:
    get:
      tags:
      - recipies
      summary: returns an array of recipe descreption
      description: this method will return the favorites user recipes
      operationId: getFavorite
      parameters:
      - name: userName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: recipes has been loaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeDescription'
        "404":
          description: recipe not found.
  /users/recipies/getCreated:
    get:
      tags:
      - recipies
      summary: returns an array of recipe descreption
      description: this method will return all recipes created by the user
      operationId: getCreated
      parameters:
      - name: userName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: recipes has been loaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeDescription'
        "404":
          description: recipe not found.
  /recipies/getRecipeFromClick:
    get:
      tags:
      - recipies
      summary: this method will return clicked recipe.
      description: recipe has been returned.
      operationId: getClickedRecipe
      parameters:
      - name: recipeId
        in: query
        description: pass an id of recipe to show
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: found results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fullRecipe'
        "404":
          description: recipe id not found.
  /recipies/addRecipe:
    post:
      tags:
      - recipies
      summary: this method will add a recipe to the DB.
      operationId: addRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addedRecipe'
        required: true
      responses:
        "200":
          description: Recipe was added successfully
        "403":
          description: couldn't register recipe to DB
  /load:
    get:
      tags:
      - homePage
      summary: this method will return HTML, Css and Js files for the home page
      description: Load all HTML, CSS and JS resources needed to show the websit.
      operationId: loadPage
      responses:
        "200":
          description: Load was successful
          content:
            application/JS:
              schema:
                type: object
        "404":
          description: Resources didnt found.
components:
  schemas:
    loginBody:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
      example:
        userName: uri
        password: 123456trt
    user:
      type: object
      properties:
        userName:
          maxLength: 10
          minLength: 3
          type: string
          description: userName contatins between 3 to 10 letters only
          example: user
        firstName:
          type: string
          description: user's first name
          example: uri
        lastName:
          type: string
          description: user's last name
          example: zlot
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: pasword contatins between 5 to 10 chars, at least one of them is a number and one letter.
          format: password
          example: yalla232
        email:
          type: string
          description: user's email
          format: email
          example: uri@zlot.com
      description: user info
    addedRecipe:
      required:
      - glutenFree
      - ingridients
      - instructions
      - name
      - numberOfMeals
      - picture
      - timeToMake
      - whoCanEatVegOrNot
      type: object
      properties:
        name:
          type: string
          example: pasta
        timeToMake:
          type: string
          description: how much time it take to make the recipe
          format: time
          example: 15:00m
        whoCanEatVegOrNot:
          type: string
          enum:
          - vegeterian
          - vegan
          - meetLovers
        glutenFree:
          type: boolean
        ingridients:
          type: string
          description: ingridients to make the recipe
          example: cheese
        instructions:
          type: string
          description: instructions to make the recipe
          example: add salt
        numberOfMeals:
          type: integer
          description: The number of meals that will be created
          format: int32
          example: 10
    recipeDescription:
      required:
      - glutenFree
      - id
      - name
      - picture
      - popularity
      - timeToMake
      - vegOrNot
      - wasSavedByUser
      - wasWatchedByUserBefore
      type: object
      properties:
        id:
          type: string
          format: recipeId
          example: myRecipe_1234
        name:
          type: string
          example: pasta
        timeToMake:
          type: string
          description: time to make the recipe
          format: time
          example: 15:00m
        popularity:
          type: integer
          description: number of likes
          format: int32
          example: 12
        vegOrNot:
          type: string
          enum:
          - vegeterian
          - vegan
          - meetLovers
        glutenFree:
          type: boolean
        wasWatchedByUserBefore:
          type: boolean
        wasSavedByUser:
          type: boolean
    cookRecipe:
      required:
      - ingridients
      - instructions
      - numberOfMeals
      type: object
      properties:
        ingridients:
          type: string
          description: ingridients to make the recipe
          example: brocolli
        instructions:
          type: string
          description: instructions to make the recipe
          example: two spoon of salt
        numberOfMeals:
          type: integer
          description: The number of meals that will be created
          format: int32
          example: 10
    fullRecipe:
      allOf:
      - $ref: '#/components/schemas/recipeDescription'
      - $ref: '#/components/schemas/cookRecipe'
